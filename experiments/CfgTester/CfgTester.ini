//----------------------------------------------------------------------
// cfgtesting -- test the config reader/write
// TODO: normalize names?
//
// run this program interactively and look at the menu commands
//----------------------------------------------------------------------

#include <stddef.h>

// FIX: omg omg omg why is this so hard sudo ln -s $HOME/g/arrbot/include /arrbot

#include <EEPROM.h>
#include "/arrbot/arrservos.h"
#include "/arrbot/arrheader.h"

arrbot_cfg cfg;

#define P(x) Serial.print(x)
#define P2(a, b) P(a); P(b)
#define PV(x) P(x); P(" ");
//#define PV(x) P(" " #x ": "); P(x);

//----------------------------------------------------------------------
// offsets -- print the size and offsets of the cfg
//----------------------------------------------------------------------
void offsets() {
  P2(" sizeof ", sizeof(cfg));
  P2(" ", offsetof(struct arrbot_cfg, magic));
  P2(" ", offsetof(struct arrbot_cfg, version));
  P2(" ", offsetof(struct arrbot_cfg, sz));
  P2(" ", offsetof(struct arrbot_cfg, cksum));
  P2(" - ", offsetof(struct arrbot_cfg, l));
  P2(" ", offsetof(struct arrbot_cfg, l.mid));
  P2(" ", offsetof(struct arrbot_cfg, l.span));
  P2(" ", offsetof(struct arrbot_cfg, l.reverse));
  P2(" - ", offsetof(struct arrbot_cfg, r));
  P2(" ", offsetof(struct arrbot_cfg, r.mid));
  P2(" ", offsetof(struct arrbot_cfg, r.span));
  P2(" ", offsetof(struct arrbot_cfg, r.reverse));
  P("\r\n");
}

//----------------------------------------------------------------------
// vals -- print the cfg values
//----------------------------------------------------------------------
void vals() {
  P(" vals ");
  PV(cfg.magic);
  PV(cfg.version);
  PV(cfg.sz);
  PV(cfg.cksum);
  PV(cfg.l.mid);
  PV(cfg.l.span);
  PV(cfg.l.reverse);
  PV(cfg.r.mid);
  PV(cfg.r.span);
  PV(cfg.r.reverse);
  P("\r\n");
}

//----------------------------------------------------------------------
void setup()
{
  cfg.init();
}

//----------------------------------------------------------------------
void loop()
{
  int cmd;
  if (Serial.available() > 0) {
    cmd = Serial.read();
    P((char)cmd);
    P(" ");
  
    switch (cmd) {
      case 'p':                 vals(); break; // print values
      case 'i': cfg.init();     vals(); break; // sane initialize
      case 'w': cfg.write();    vals(); break; // write cfg to eeprom
      case 'r': cfg.read();     vals(); break; // read cfg from eeprom
      case 'z': cfg.l.mid += 1; vals(); break; // increment for testing
      case 'o': offsets();              break; // print offsets
      default: P("ERROR [piwrzo]\r\n"); break; // user friendly
    }
  }
  delay(100);
}
